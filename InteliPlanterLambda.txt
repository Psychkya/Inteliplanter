from __future__ import print_function
 
import json
import boto3
import datetime

print('Loading function')

#find clicks required to get to dimmer state value
def cntClicks(previous,new,nextstate):
    print("counting clicks")
    click = 0
    while(previous != new):
        previous = previous+nextstate
        click +=1
        if (previous == 1) or (previous == 9):
            nextstate = nextstate*-1
    return (click,nextstate)
 
def lambda_handler(event, context):
 
    #current_time = datetime.datetime.now()  
    #print (current_time)  
 
    # Parse the JSON message
    sensor = event['current']['state']['reported']
    #sensor = event['state']['reported']
    #print(sensor)
    Id = sensor['id']
    
    #Update data in the dynamoDB data base 
    dynamodb = boto3.resource('dynamodb')
    planterTable = dynamodb.Table('IntelliPlanter')
    plantTable = dynamodb.Table('plant_catalog')

    # Get planter from tables
    response1 = planterTable.get_item(
        Key={
            'PlanterId': Id
        }
    )
    planter = response1['Item']
    
    # Get plant type from table
    plant = planter['plantType']
    response2 = plantTable.get_item(
        Key={
            'plantType': plant
        }
    )
    plantType = response2['Item']

### Shadow Variables ###
    waterUnlock = int(sensor['waterUnlock'])
    waterTimer = planter['waterTimerDays']
    moisture_str = sensor['moisture']
    errorMessage = "Happy Growing =)"
    moisture = int(sensor['moisture'])
    pumpSw = sensor['pumpSw']
    pumpDur = sensor['pumpDur']
    lightUnlock = int(sensor['lightUnlock'])
    lightCnt = planter['lightCnt']
    lightSwitch = int(sensor['lightSwitch'])
    lightSwitchCmd = int(sensor['lightSwitchCmd'])
    lightDimCmd = int(sensor['lightDimCmd'])
    dimmerValue = int(sensor['dimmerValue'])
    dimmerCurrent = 0
    nextState = int(sensor['nextState'])
    clicks = int(sensor['clicks'])
    lightExposure = ''
    uv_value = int(sensor['uv'])
    vis_value = int(sensor['vis'])/.282
    ir_value = int(sensor['ir'])
    demoDays = planter['demoDays']
    
###### Light Logic ######   
    
    print(int(vis_value))
    if (lightUnlock == 1):
        # Only for demo purposes 
        if(demoDays == 12):
            demoDays = 0
            lightCnt = 0
        else:
            demoDays = demoDays + 1
        
        ### Check if light is adequate ###  
        if (vis_value < 907): #256
            lightExposure = 'none'
            dimmerCurrent = 9
            
        elif(907 < vis_value < 957): #265
            lightExposure = 'low'
            dimmerCurrent = 7
            
        elif(957 < vis_value < 1064): #300
            lightExposure = 'medium'
            dimmerCurrent = 5
            
        elif(1064 < vis_value < 1300): 
            lightExposure = 'high'
            dimmerCurrent = dimmerCurrent
        else:
            lightExposure = 'sun'

        ### Turn light on if not high, otherwise make sure light is off ###
        if(((plantType['lightExposure'] == 'full') & (lightCnt < 8)) |
        ((plantType['lightExposure'] == 'partial') & (lightCnt < 6)) |
        ((plantType['lightExposure'] == 'shade') & (lightCnt < 4))):
            if(lightExposure != 'sun'):
                if(lightSwitch == 0):
                    lightSwitchCmd = 1
                    lightSwitch = 1
                
                #if((lightExposure != 'high') & ((dimmerCurrent < dimmerValue) | (dimmerCurrent == dimmerValue))):
                #    dimmerCurrent = dimmerValue + 1
                    
                a = cntClicks(dimmerValue,dimmerCurrent,nextState)
                clicks = a[0]
                if(clicks != 0):
                    lightDimCmd = 1
                    dimmerValue = dimmerCurrent
                    nextState = a[1]
                else: 
                    lightDimCmd = 0
                
            elif(lightExposure=='sun'):
                lightCnt = lightCnt + 1; 
                if(lightSwitch == 1 ):
                    lightSwitchCmd = 1
                    lightSwitch = 0
        else:
            if(lightSwitch == 1):
                lightSwitchCmd = 1
                lightSwitch = 0
                
        lightUnlock = 0
        
        myclient = boto3.client('iot-data')
        data = {"state" : { "reported" : { "pumpSw" : str(pumpSw), "pumpDur" : str(pumpDur).zfill(3), "waterUnlock" : str(waterUnlock),  
                "dimmerValue" : str(dimmerValue), "nextState" : str (nextState), "lightSwitch" : str(lightSwitch), 
                "lightSwitchCmd" : str(lightSwitchCmd), "clicks" : str(clicks).zfill(2), "lightDimCmd" : str(lightDimCmd), "lightUnlock" : str(lightUnlock) }}}
        eventText = json.dumps(data)
    
        #Publish a message to the specified topic
        response = myclient.publish (
            topic = '$aws/things/PlantSoilWater/shadow/update',
            qos = 0,
            payload = eventText.encode()
        ) 
        
        response3 = planterTable.update_item(
            Key={
                'PlanterId': Id
            },
            UpdateExpression="set light=:l, lightCnt=:c, demoDays =:d",
            ExpressionAttributeValues={
                ':c': lightCnt,
                ':l': int(vis_value),
                ':d': demoDays
            },
        )
   
###### Moisture Logic ######
    
    if (waterUnlock == 1): #check for water update

        if (waterTimer > 0): #assumes we only check water once a day, needs to be fixed
            waterTimer = waterTimer - 1
            print("counting down days")
        elif (moisture < 400) and (waterTimer == -1):
            if (plantType['waterLevel'] == 'dry'):
                waterTimer = 30
            elif (plantType['waterLevel'] == 'average'):
                waterTimer = 2
            elif (plantType['waterLevel'] == 'moist'):
                waterTimer = 0
        elif (waterTimer == 0) and (sensor['waterLvl'] != 'C'):
            pumpSw = 1
            pumpDur = 10 #THIS HAS TO COME FROM DYNAMODB
            waterTimer = waterTimer - 1
    
        if (sensor['waterLvl'] == 'C'):
            errorMessage = "URGENT: Water level is critally low, please refill the water tank"
        elif (sensor['waterLvl'] == 'L'):
            errorMessage = "Water level is low, please refill the water tank"
            
        waterUnlock = 0 #This is to prevent lambda from triggering over and over again
  
##### Update shadow with new values #####  
        myclient = boto3.client('iot-data')
        data = {"state" : { "reported" : { "pumpSw" : str(pumpSw), "pumpDur" : str(pumpDur).zfill(3), "waterUnlock" : str(waterUnlock),  
                "dimmerValue" : str(dimmerValue), "nextState" : str (nextState), "lightSwitch" : str(lightSwitch), 
                "lightSwitchCmd" : str(lightSwitchCmd), "clicks" : str(clicks).zfill(2), "lightDimCmd" : str(lightDimCmd), "lightUnlock" : str(lightUnlock) }}}
        eventText = json.dumps(data)
        
        #Publish a message to the specified topic
        response = myclient.publish (
            topic = '$aws/things/PlantSoilWater/shadow/update',
            qos = 0,
            payload = eventText.encode()
        )        

   
##### Update dynamoDB with new values #####

        response3 = planterTable.update_item(
            Key={
                'PlanterId': Id
            },
            UpdateExpression="set moisture=:m, waterTimerDays=:w, errorMessage=:e",
            ExpressionAttributeValues={
                ':m': moisture_str,
                ':w': waterTimer,
                ':e': errorMessage
            },
        )  